# Autoload version control info
autoload -Uz vcs_info

# Enable git
zstyle ':vcs_info:*' enable git

# setup a hook that runs before every ptompt. 
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )

# add a function to check for untracked files in the directory.
# from https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-st
# 
+vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | grep '??' &> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[misc]+='' # signify new files with a bang
    fi
}

# Show remote ref name and number of commits ahead-of or behind
function +vi-git-st() {
    local ahead behind remote
    local -a gitstatus

    # Are we on a remote-tracking branch?
    remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
        --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

    if [[ -n ${remote} ]] ; then
        # for git prior to 1.7
        # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
        ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
        (( $ahead )) && gitstatus+=( " ${c3}↑${ahead}${c2}" )

        # for git prior to 1.7
        # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
        behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
        (( $behind )) && gitstatus+=( " ${c4}↓${behind}${c2}" )

        hook_com[branch]+="${(j:/:)gitstatus}"
    fi
}


# Configure git info
zstyle ':vcs_info:git*' stagedstr " "
zstyle ':vcs_info:git*' unstagedstr " "
zstyle ':vcs_info:*' check-for-changes true
# zstyle ':vcs_info:git:*' formats " %r/%S %b %m%u%c "
zstyle ':vcs_info:git:*' formats " %{$fg[blue]%}(%{$fg[green]%}%c%{$fg[red]%}%u%{$fg[yellow]%}%m%{ $fg[yellow]%}%{$fg[magenta]%} %b%{$fg[blue]%})"

PROMPT="
%B%{$fg[blue]%} %2~%{$reset_color%} %(?:%{$fg_bold[magenta]%}➜  :%{$fg_bold[red]%} ➜  )%{$fg[white]%}%b"
RPROMPT="\$vcs_info_msg_0_ "
